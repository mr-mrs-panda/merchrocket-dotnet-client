variables:
  PROJECT_NAME: "Merchrocket.Client"
  PROJECT_PATH: "pandaliebe/nuget/merchrocket-client.git"

stages:
  - build
  - deploy
  - post_deploy

dotnet_build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - dotnet restore
    - dotnet build $PROJECT_NAME

dotnet_deploy:
  image: mcr.microsoft.com/dotnet/sdk:8.0
  stage: deploy
  before_script:
    - dotnet nuget add source "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/nuget/index.json" --name gitlabci --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
  script:
    - export FULL_VERSION=$(cat version.txt)
    - echo "Deploying version $FULL_VERSION"
    - dotnet pack -c Release -o Packages -p:PackageVersion=$FULL_VERSION $PROJECT_NAME
    - dotnet nuget push "Packages/*.nupkg" --source gitlabci
  only:
    - main

bump_version:
  image: debian:latest
  stage: post_deploy
  script:
    - apt-get update && apt-get install -y git perl
    - git fetch --unshallow || true
    - export CURRENT_VERSION=$(cat version.txt)
    - |
      export CURRENT_VERSION=$(cat version.txt)
      NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1 "." $2 "." $3+1}')
      echo $NEW_VERSION > version.txt
      git config --global user.email "technik@pandaliebe.de"
      git config --global user.name "GitLab CI"
      export CI_PUSH_REPO=$(echo $CI_REPOSITORY_URL | perl -pe 's#.*@(.*?)\/#git@\1:#')
      if git remote | grep gitlab_origin > /dev/null; then
          git remote set-url gitlab_origin https://oauth2:$GIT_ACCESS_TOKEN@gitlab.com/$PROJECT_PATH
      else
          git remote add gitlab_origin https://oauth2:$GIT_ACCESS_TOKEN@gitlab.com/$PROJECT_PATH
      fi
      git add version.txt
      git commit -m "Bump version to $NEW_VERSION [skip ci]"
      git push gitlab_origin HEAD:main
  only:
    - main